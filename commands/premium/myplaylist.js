const { embedsActionBy, pageQueue } = require('@utils/generateEmbed')
const delay = require('delay')
const { MessageEmbed, MessageActionRow, MessageSelectMenu } = require('discord.js')
const { TrackUtils } = require('erela.js')

module.exports = {
    name: `myplaylist`,
    category: `üí∞ Premium`,
    aliases: [`myplaylists`, `myplaylist`, `‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°`],
    description: `Saves the Current Queue onto a Name`,
    extracustomdesc:
        '`myplaylist create`, `myplaylist addcurrenttrack`, `myplaylist addcurrentqueue`, `myplaylist removetrack`, `myplaylist removedupes`, `myplaylistshowall`, `myplaylist showdetails`, `myplaylist createsave`, `myplaylist delete`, `myplaylist play`, `myplaylist shuffle`',
    usage: `\`myplaylist <Type> <Name> [Options]\`\n
  **Types**:
  > \`create\`, \`addcurrenttrack\`, \`addcurrentqueue\`, \`removetrack\`, \`removedupes\`, \`showall\`, \`showdetails\`, \`createsave\`, \`delete\`, \`play\`, \`shuffle\`
  **Name**:
  > \`Can be anything with maximum of 10 Letters\`
  **Options**:
  > \`pick the track which you want to remove\``,
    joinchannel: true,
    run: async (client, message, args, query, player, es, lang, prefix) => {
        const { member } = message
        let Type = args[0]
        let Name = args[1]
        let Options = args.slice(2).join(` `)
        if (!Type)
            return message.reply({
                embeds: [embedsActionBy('‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™')]
            })

        switch (Type.toLowerCase()) {
            case `addcurrenttrack`:
                {
                    checkNameIsEmpty(message, Name)
                    checkNameLength(message, Name, 10)
                    const playlist = client.playlists.get(message.author.id, `${Name}`)
                    if (!playlist)
                        return message.reply({
                            embeds: [new MessageEmbed().setColor('RED').setTitle(`‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î | ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ô‡∏µ‡πâ`).setDescription(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ ‡∏û‡∏¥‡∏°‡∏û‡πå \`${prefix}saveplaylist create ${Name}\``)]
                        })
                    //get the player instance
                    var player = client.manager.get(message.guild.id)
                    //if no player available return error | aka not playing anything
                    if (!player)
                        return message.reply({
                            embeds: [embedsActionBy('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ')]
                        })
                    //get the current track
                    const track = player.queue.current
                    //if there are no other tracks, information
                    if (!track)
                        return message.reply({
                            embeds: [embedsActionBy('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ')]
                        })
                    let oldtracks = client.playlists.get(message.author.id, `${Name}`)
                    if (!Array.isArray(oldtracks)) oldtracks = []
                    //add the track
                    oldtracks.push({
                        title: track.title,
                        url: track.uri
                    })
                    //save it in the db
                    client.playlists.set(message.author.id, oldtracks, `${Name}`)
                    //return susccess message
                    return message.reply({
                        embeds: [embedsActionBy(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á ${track.title} ‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™ \`${Name}\` ‡πÅ‡∏•‡πâ‡∏ß `)]
                    })
                }
                break
            case `addcurrentqueue`:
                {
                    checkNameIsEmpty(message, Name)
                    checkNameLength(message, Name, 10)
                    const playlist = client.playlists.get(message.author.id, `${Name}`)
                    if (!playlist)
                        return message.reply({
                            embeds: [new MessageEmbed().setColor('RED').setTitle(`‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î | ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ô‡∏µ‡πâ`).setDescription(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ ‡∏û‡∏¥‡∏°‡∏û‡πå \`${prefix}saveplaylist create ${Name}\``)]
                        })
                    //get the player instance
                    var player = client.manager.get(message.guild.id)
                    //if no player available return error | aka not playing anything
                    if (!player)
                        return message.reply({
                            embeds: [embedsActionBy('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ')]
                        })
                    const tracks = player.queue
                    //if there are no other tracks, information
                    if (!tracks.length)
                        return message.reply({
                            embeds: [embedsActionBy('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ')]
                        })
                    //get the old tracks from the Name
                    let oldtracks = client.playlists.get(message.author.id, `${Name}`)
                    if (!Array.isArray(oldtracks)) oldtracks = []
                    const newtracks = []

                    for (const track of tracks)
                        newtracks.push({
                            title: track.title,
                            url: track.uri
                        })

                    if (player.queue.current)
                        newtracks.push({
                            title: player.queue.current.title,
                            url: player.queue.current.uri
                        })
                    //define the new customqueue by adding the newtracks to the old tracks
                    let newqueue = oldtracks.concat(newtracks)
                    //save the newcustomqueue into the db
                    client.playlists.set(message.author.id, newqueue, `${Name}`)
                    //return susccess message
                    return message.reply({
                        embeds: [
                            embedsActionBy(
                                `${emoji.msg.SUCCESS} ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á ${tracks.length} ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™ \`${Name}\` ‡πÅ‡∏•‡πâ‡∏ß \n ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î \`${newqueue.length} ‡πÄ‡∏û‡∏•‡∏á\`\n\n‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢ ‡∏û‡∏¥‡∏°‡∏û‡πå: \`${prefix}playlists play ${Name}\``
                            )
                        ]
                    })
                }
                break
            case `removetrack`:
            case `removesong`:
                {
                    checkNameIsEmpty(message, Name)
                    checkNameLength(message, Name, 10)
                    checkOption(Options)
                    const playlist = client.playlists.get(message.author.id, `${Name}`)
                    if (!playlist)
                        return message.reply({
                            embeds: [new MessageEmbed().setColor('RED').setTitle(`‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î | ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ô‡∏µ‡πâ`).setDescription(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ ‡∏û‡∏¥‡∏°‡∏û‡πå \`${prefix}playlists create ${Name}\``)]
                        })

                    if (Number(Options) >= playlist.length || Number(Options) < 0)
                        return message.reply({
                            embeds: [embedsActionBy(`‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏™‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà (\`0\` - \`${tracks.length - 1}\`)`)]
                        })
                    let deletetrack = tracks[Number(Options)]
                    //delete it
                    delete tracks[Number(Options)]
                    //remove empty spaces
                    tracks = tracks.filter(function (entry) {
                        return /\S/.test(entry)
                    })
                    //save it on the db again
                    client.playlists.set(message.author.id, tracks, `${Name}`)
                    //return susccess message
                    return message.reply({
                        embeds: [embedsActionBy(`<a:yes:833101995723194437> ‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á ${deletetrack.title} ‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™ \`${Name}\``)]
                    })
                }
                break
            case `shuffle`:
            case `mix`:
                {
                }
                break
            case `showall`:
            case `listall`:
            case `show`:
            case `queue`:
            case `list`:
                {
                    let queues = client.playlists.get(message.author.id)
                    var Emoji_Pages = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']
                    if (Object.size(queues) <= 1)
                        return message.reply({
                            embeds: [embedsActionBy(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡πÇ‡∏î‡∏¢ \`${prefix}saveplaylist create <‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å>\``)]
                        })
                    let newData = []
                    let i = 0
                    for (const item in queues) {
                        if (item === `TEMPLATEQUEUEINFORMATION`) continue
                        newData.push({
                            label: item,
                            value: item,
                            description: `${item} | ${queues[item].length} ‡πÄ‡∏û‡∏•‡∏á`,
                            emoji: Emoji_Pages[i]
                        })
                        i++
                    }

                    const musicmixMenu = new MessageActionRow().addComponents(new MessageSelectMenu().setCustomId('myplaylist_list').addOptions(newData))

                    message.reply({
                        content: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Playlist ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                        components: [musicmixMenu]
                    })
                }
                break
            case `add`:
            case `‡πÄ‡∏û‡∏¥‡πà‡∏°`:
            case `‡πÄ‡∏û‡∏•‡∏á`:
                {
                    if (!Name) {
                        let playlists = client.playlists.get(message.author.id)
                        let description = ``
                        for (const item in playlists) {
                            if (item === `TEMPLATEQUEUEINFORMATION`) continue
                            description += `**‚ùØ ${item}** | \`${playlists[item].length} Tracks\`\n`
                        }
                        //return susccess mess
                        return message.reply({
                            embeds: [
                                embedsActionBy(
                                    `${emoji.msg.ERROR} ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î | ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™ \n‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${prefix}saveplaylist add \`<‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á>\` <‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á/‡∏•‡∏¥‡∏á‡∏Å‡πå>\n\n\n ${description}`
                                )
                            ]
                        })
                    }
                    const playlist = client.playlists.get(message.author.id, `${Name}`)
                    if (!playlist)
                        return message.reply({
                            embeds: [new MessageEmbed().setColor('RED').setTitle(`‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î | ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ô‡∏µ‡πâ`).setDescription(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ ‡∏û‡∏¥‡∏°‡∏û‡πå \`${prefix}saveplaylist create ${Name}\``)]
                        })

                    if (!Options)
                        return message.reply({
                            embeds: [new MessageEmbed().setColor('RED').setTitle(`‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î | ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á`).setDescription(`‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${prefix}saveplaylist add ${Name} \`<‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á/‡∏•‡∏¥‡∏á‡∏Å‡πå>\`\n`)]
                        })

                    try {
                        // Search for tracks using a query or url, using a query searches youtube automatically and the track requester object
                        res = await client.manager.search(Options, message.author)

                        let oldtracks = client.playlists.get(message.author.id, `${Name}`)

                        if (!Array.isArray(oldtracks)) oldtracks = []

                        // Check the load type as this command is not that advanced for basics
                        if (res.loadType === 'LOAD_FAILED') throw res.exception
                        else if (res.loadType === 'NO_MATCHES') return message.reply('there was no tracks found with that query.')
                        else if (res.loadType === 'PLAYLIST_LOADED') {
                            const newtracks = []

                            for (const track of res.tracks) {
                                const found = oldtracks.some((el) => el.id === track.identifier)
                                if (!found)
                                    newtracks.push({
                                        id: track.identifier,
                                        title: track.title,
                                        url: track.uri
                                    })
                            }
                            //define the new customqueue by adding the newtracks to the old tracks
                            let newqueue = oldtracks.concat(newtracks)
                            //save the newcustomqueue into the db
                            client.playlists.set(message.author.id, newqueue, `${Name}`)

                            return message.reply({
                                embeds: [
                                    new MessageEmbed()
                                        .setAuthor({
                                            name: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á ${newtracks.length} ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™ ${Name} ‡πÅ‡∏•‡πâ‡∏ß`,
                                            url: null
                                        })
                                        .setDescription(`‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ \`${newqueue.length} ‡πÄ‡∏û‡∏•‡∏á\` \n\n‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡πÇ‡∏î‡∏¢ ‡∏û‡∏¥‡∏°‡∏û‡πå: \`${prefix}saveplaylist play ${Name}\``)
                                        .setColor('RANDOM')
                                ]
                            })
                        } else {
                            const found = oldtracks.some((el) => el.id === res.tracks[0].identifier)

                            console.log(res.tracks[0])
                            if (!found) {
                                oldtracks.push({
                                    id: res.tracks[0].identifier,
                                    title: res.tracks[0].title,
                                    url: res.tracks[0].uri
                                })
                                //save it in the db
                                client.playlists.set(message.author.id, oldtracks, `${Name}`)

                                //return susccess message
                                return message.reply({
                                    embeds: [
                                        new MessageEmbed()
                                            .setAuthor({
                                                name: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á ${res.tracks[0].title} ‡∏•‡∏á‡πÉ‡∏ô Playlist ${Name} ‡πÅ‡∏•‡πâ‡∏ß`,
                                                url: null
                                            })

                                            .setDescription(
                                                `‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ \`${client.playlists.get(message.author.id, `${Name}`).length} ‡πÄ‡∏û‡∏•‡∏á\`\n\n‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡πÇ‡∏î‡∏¢ ‡∏û‡∏¥‡∏°‡∏û‡πå: \`${prefix}playlists play ${Name}\``
                                            )
                                    ]
                                })
                            }
                            return message.reply({
                                embeds: [new MessageEmbed().setTitle(`‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î | ‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡πÅ‡∏•‡πâ‡∏ß`).setDescription(`‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™ ${Name} ‡πÅ‡∏•‡πâ‡∏ß`)]
                            })
                        }
                    } catch (err) {
                        return message.reply(`there was an error while searching: ${err.message}`)
                    }
                }
                break
            case `create`:
            case `createsave`:
            case `cs`:
            case `save`:
            case `‡∏™‡∏£‡πâ‡∏≤‡∏á`:
            case `save`:
                {
                    checkNameIsEmpty(message, Name)
                    checkNameLength(message, Name, 10)
                    const playlist = client.playlists.get(message.author.id, `${Name}`)
                    if (playlist)
                        return message.reply({
                            embeds: [
                                new MessageEmbed()
                                    .setColor('RED')
                                    .setTitle(`‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î | ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™ ${Name} ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`)
                                    .setDescription(
                                        `‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏•‡∏á‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡πÇ‡∏î‡∏¢ \n\`${prefix}saveplaylist add ${Name} <‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á/‡∏•‡∏¥‡∏á‡∏Å‡πå>\`\n‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™ : \`${prefix}saveplaylist addcurrentqueue ${Name}\`\n‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™: \`${prefix}saveplaylist addcurrenttrack ${Name}\``
                                    )
                            ]
                        })

                    //save the newcustomqueue into the db
                    client.playlists.set(
                        message.author.id,
                        {
                            TEMPLATEQUEUEINFORMATION: [`queue`, `sadasd`]
                        },
                        `${Name}`
                    )

                    //return susccess message
                    return message.reply({
                        embeds: [
                            new MessageEmbed()
                                .setTitle(`‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à | ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏•‡∏¢‡∏•‡∏¥‡∏™ ${Name} ‡πÅ‡∏•‡πâ‡∏ß`)
                                .setDescription(
                                    `‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™ : \`${prefix}saveplaylist add ${Name} <‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á/‡∏•‡∏¥‡∏á‡∏Å‡πå>\`\n‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™ : \`${prefix}saveplaylist addcurrentqueue ${Name}\`\n‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™: \`${prefix}saveplaylist addcurrenttrack ${Name}\``
                                )
                                .setColor('GREEN')
                                .setFooter({
                                    text: `üí¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢: ${member.user.tag}`,
                                    iconURL: member.user.displayAvatarURL({
                                        dynamic: true
                                    })
                                })
                        ]
                    })
                }
                break
            case `delete`:
            case `remove`:
            case `del`:
            case `‡∏•‡∏ö`:
                {
                    checkNameIsEmpty(message, Name)
                    checkNameLength(message, Name, 10)

                    const playlist = client.playlists.get(message.author.id, `${Name}`)
                    if (!playlist)
                        return message.reply({
                            embeds: [new MessageEmbed().setColor('RED').setTitle(`‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î | ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ô‡∏µ‡πâ`).setDescription(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡∏ô‡∏µ‡πâ`)]
                        })

                    client.playlists.delete(message.author.id, `${Name}`)

                    //return susccess message
                    return message
                        .reply({
                            embeds: [
                                new MessageEmbed()
                                    .setTitle(`‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à | ‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏¢‡∏•‡∏¥‡∏™`)
                                    .setDescription(`‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™ ${Name} ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß`)
                                    .setColor('GREEN')
                                    .setFooter({
                                        text: `üí¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢: ${member.user.tag}`,
                                        iconURL: member.user.displayAvatarURL({
                                            dynamic: true
                                        })
                                    })
                            ]
                        })
                        .then(async (msg) => {
                            await delay(4000)
                            return msg.delete()
                        })
                }
                break
            case `play`:
            case `load`:
            case `p`:
            case `paly`:
                {
                    checkNameIsEmpty(message, Name)
                    checkNameLength(message, Name, 10)
                    //get the channel instance from the Member
                    const { channel } = message.member.voice
                    //if the member is not in a channel, return
                    if (!channel)
                        return message.reply({
                            embeds: [new MessageEmbed().setColor('REND').setTitle('‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á')]
                        })
                    const mechannel = message.guild.me.voice.channel
                    //get the player instance
                    var player = client.manager.players.get(message.guild.id)
                    let playercreate = false
                    if (!player) {
                        player = client.manager.create({
                            guild: message.guild.id,
                            voiceChannel: message.member.voice.channel.id,
                            textChannel: message.channel.id,
                            selfDeafen: true
                        })
                        player.connect()
                        player.set('message', message)
                        player.set('playerauthor', message.author.id)
                        playercreate = true
                    }
                    //if not in the same channel as the player, return Error
                    if (player && channel.id !== player.voiceChannel)
                        return message.reply({
                            embeds: [new MessageEmbed().setTitle('if not in the same channel as the player, return Error')]
                        })
                    //If there is no player, then kick the bot out of the channel, if connected to
                    if (!player && mechannel) {
                        message.guild.me.voice.disconnect().catch((e) => console.log('This prevents a Bug'))
                    }
                    //if not in the same channel --> return
                    if (mechannel && channel.id !== mechannel.id)
                        return message.reply({
                            embeds: [new MessageEmbed().setDescription(` //if not in the same channel --> return`)]
                        })
                    //if the queue does not exist yet, error
                    if (!client.playlists.get(message.author.id, `${Name}`))
                        return message.reply({
                            embeds: [new MessageEmbed().setDescription(` //if the queue does not exist yet, error`)]
                        })
                    //now add every track of the tracks
                    let tempmsg = await message.reply({
                        embeds: [new MessageEmbed().setDescription(` //now add every track of the tracks`)]
                    })

                    for (const track of client.playlists.get(message.author.id, `${Name}`)) {
                        try {
                            // Advanced way using the title, author, and duration for a precise search.
                            const unresolvedTrack = TrackUtils.buildUnresolved(
                                {
                                    title: track.title,
                                    url: track.url
                                },
                                message.author
                            )
                            player.queue.add(unresolvedTrack)
                        } catch (e) {
                            console.log(e.stack ? String(e.stack).grey : String(e).grey)
                            continue
                        }
                    }
                    //return susccess message - by editing the old temp msg
                    tempmsg.edit({
                        embeds: [new MessageEmbed().setDescription(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô Playlist ${Name}`).setColor('BLURPLE')]
                    })
                    if (playercreate) player.play()
                }
                break
            case `showdetails`:
            case `showdetail`:
            case `details`:
                {
                    checkNameIsEmpty(message, Name)
                    checkNameLength(message, Name, 10)

                    const playlist = client.playlists.get(message.author.id, `${Name}`)
                    if (!playlist)
                        return message.reply({
                            embeds: [new MessageEmbed().setColor('RED').setTitle(`‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î | ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™‡∏ô‡∏µ‡πâ`).setDescription(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏±‡∏•‡∏ö‡∏±‡πâ‡∏°‡∏ô‡∏µ‡πâ`)]
                        })

                    const tracks = client.playlists.get(message.author.id, `${Name}`)
                    //if the queue does not exist yet, error
                    if (!tracks.length)
                        return message.reply({
                            embeds: [new MessageEmbed().setColor('RED').setDescription(` empty playlists`)]
                        })

                    return pageQueue(message, tracks)
                }
                break
            default:
                break
        }
    }
}

/**
 * It checks if the name is empty. If it is empty, it will return the message.reply() function with the
 * embeds.
 * @param message - The message object that was sent by the user.
 * @param name - The name of the command.
 * @returns The `checkNameIsEmpty` function returns a `Promise` object.
 */
function checkNameIsEmpty(message, name) {
    if (!name)
        return message.reply({
            embeds: [new MessageEmbed().setColor('RED').setTitle('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î').setDescription('‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏•‡∏¥‡∏™')]
        })
}

/**
 * It checks if the user has entered a song name. If not, it will return an error message.
 * @param option - The name of the song you want to play.
 * @returns The bot will return the song name and the artist name.
 */
function checkOption(option) {
    if (!option)
        return message.reply({
            embeds: [new MessageEmbed().setColor('RED').setTitle('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î').setDescription('‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á')]
        })
}

/**
 * It checks if the length of the name is greater than the length specified.
 * @param message - The message object that was sent by the user.
 * @param name - The name of the command.
 * @param length - The maximum length of the name.
 * @returns a message object.
 */
function checkNameLength(message, name, length) {
    if (name.length > length)
        return message.reply({
            embeds: [new MessageEmbed().setColor('RED').setTitle(`‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î | ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ${length}`).setDescription(`‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ${length}`)]
        })
}

/* The function returns the number of properties in an object. */
Object.size = function (obj) {
    var size = 0,
        key
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++
    }
    return size
}
